name: Ubuntu

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:

    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, '[ci skip]')"

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Python cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-refreshed-at-20200621-1
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Download python dependencies
      run: |
        python -m pip install setuptools wheel
        python -m pip install conan ninja mkdocs-material

    - name: Conan cache
      uses: actions/cache@v2
      with:
        path: ~/.conan
        key: ${{ runner.os }}-conan-refreshed-at-20200621
        restore-keys: |
          ${{ runner.os }}-conan-

    - name: Test documentation
      run: |
        cd docs
        mkdocs build --strict

    - name: Configure
      run: |
        cmake -S. -Bbuild -G Ninja -DCMAKE_CXX_COMPILER="clang++" -DCMAKE_C_COMPILER="clang" -DCMAKE_BUILD_TYPE="Release" -DENABLE_TESTING=ON -DENABLE_PACKAGING=ON -DCPACK_PACKAGE_FILE_NAME=Frontend.wasm

    - name: Build
      run: cmake --build build -j4

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure -j 4

    - name: Build the release tar.xz package
      if: github.ref == 'refs/heads/main'
      run: cpack -G TXZ --config build/CPackConfig.cmake

    - name: Push main release
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        echo "Pushing to the latest tag"
        gh release create latest --title "Latest release from main" --notes "This release gets updated on each commit to main" || true
        gh release upload latest "Frontend.wasm.tar.xz#Frontend.wasm-$(uname)-main.tar.xz" --clobber

        version="$(cat docs/ReleaseNotes/version)"
        echo "Making sure the release ${version} is online"
        gh release create "${version}" --title "${version}" --notes-file "docs/ReleaseNotes/${version}.md" || true
        gh release upload "${version}" "Frontend.wasm.tar.xz#Frontend.wasm-$(uname)-${version}.tar.xz" || true

